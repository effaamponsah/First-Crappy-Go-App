// Code generated by go-swagger; DO NOT EDIT.

package sample_description

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ShowGreetingsToTheAPIHandlerFunc turns a function with the right signature into a show greetings to the api handler
type ShowGreetingsToTheAPIHandlerFunc func(ShowGreetingsToTheAPIParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ShowGreetingsToTheAPIHandlerFunc) Handle(params ShowGreetingsToTheAPIParams) middleware.Responder {
	return fn(params)
}

// ShowGreetingsToTheAPIHandler interface for that can handle valid show greetings to the api params
type ShowGreetingsToTheAPIHandler interface {
	Handle(ShowGreetingsToTheAPIParams) middleware.Responder
}

// NewShowGreetingsToTheAPI creates a new http.Handler for the show greetings to the api operation
func NewShowGreetingsToTheAPI(ctx *middleware.Context, handler ShowGreetingsToTheAPIHandler) *ShowGreetingsToTheAPI {
	return &ShowGreetingsToTheAPI{Context: ctx, Handler: handler}
}

/*ShowGreetingsToTheAPI swagger:route GET / Sample description showGreetingsToTheApi

ShowGreetingsToTheAPI show greetings to the api API

*/
type ShowGreetingsToTheAPI struct {
	Context *middleware.Context
	Handler ShowGreetingsToTheAPIHandler
}

func (o *ShowGreetingsToTheAPI) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewShowGreetingsToTheAPIParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
